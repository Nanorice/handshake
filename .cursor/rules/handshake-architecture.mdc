# Handshake Architecture Guide

## System Architecture
The Handshake platform follows a decoupled client-server architecture:

```
CLIENT (React SPA) <--HTTP/REST--> SERVER (Express.js API) <--> MongoDB
```

## Technical Stack

### Frontend
- **Framework**: React.js (functional components)
- **Styling**: Tailwind CSS
- **State Management**: React Context API
- **Routing**: React Router with protected routes
- **HTTP Client**: Axios for API calls
- **Component Organization**: Uses PascalCase component files with clear separation of concerns

### Backend
- **Framework**: Express.js on Node.js
- **Database**: MongoDB with Mongoose ODM
- **Authentication**: JWT (access and refresh tokens)
- **API Structure**: RESTful design with modular controllers and routes
- **File Storage**: AWS S3/Firebase for resumes
- **TypeScript**: New backend code should use TypeScript

### Third-Party Integrations
- **Payments**: Stripe API with webhook validation
- **Meetings**: Zoom API for meeting link generation
- **Emails**: Nodemailer (optional) for notifications

## Security Architecture
- **Authentication**: JWT-based with middleware protection
- **Rate Limiting**:
  ```javascript
  const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 50 });
  app.use('/api/auth/', limiter);
  ```
- **Data Validation**: Zod for input validation
- **Environment Variables**: `.env` for secrets management

## Key Architecture Files
- [client/src/App.js](mdc:client/src/App.js) - Main client-side routing
- [client/src/contexts/AuthContext.js](mdc:client/src/contexts/AuthContext.js) - Authentication state
- [server/src/app.js](mdc:server/src/app.js) - Express application setup
- [server/src/routes/](mdc:server/src/routes) - API route definitions
- [server/src/controllers/](mdc:server/src/controllers) - Business logic handlers

