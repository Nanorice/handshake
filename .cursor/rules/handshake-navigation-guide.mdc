---
description: 
globs: 
alwaysApply: true
---
# Handshake Navigation Guide

## Project Structure Overview

### Client-Side Structure
- **Entry Points**:
  - [client/src/index.js](mdc:client/src/index.js) - Main React application entry
  - [client/src/App.js](mdc:client/src/App.js) - Main component with routing

- **Frontend Organization**:
  - [client/src/components/](mdc:client/src/components) - UI components
  - [client/src/pages/](mdc:client/src/pages) - Page components
  - [client/src/contexts/](mdc:client/src/contexts) - Context providers
  - [client/src/services/](mdc:client/src/services) - API services
  - [client/src/utils/](mdc:client/src/utils) - Utility functions
  - [client/src/hooks/](mdc:client/src/hooks) - Custom React hooks

### Server-Side Structure
- **Core Directories**:
  - [server/src/](mdc:server/src) - Server-side code
  - [server/src/routes/](mdc:server/src/routes) - API routes
  - [server/src/controllers/](mdc:server/src/controllers) - Business logic
  - [server/src/models/](mdc:server/src/models) - MongoDB models
  - [server/src/middleware/](mdc:server/src/middleware) - Express middleware

- **Important Documents**:
  - [server/DATABASE_SCHEMA.md](mdc:server/DATABASE_SCHEMA.md) - Database schema
  - [server/API_ROUTES.md](mdc:server/API_ROUTES.md) - API endpoints
  - [server/DATABASE_CONFIG.md](mdc:server/DATABASE_CONFIG.md) - Database configuration

## Authentication Flow

### Authentication Services
- [client/src/services/authService.js](mdc:client/src/services/authService.js) - Authentication API calls
- [client/src/contexts/AuthContext.js](mdc:client/src/contexts/AuthContext.js) - Auth state management

### Authentication Components
- [client/src/components/Auth/LoginForm.js](mdc:client/src/components/Auth/LoginForm.js) - Login form
- [client/src/pages/RegisterProfessional.js](mdc:client/src/pages/RegisterProfessional.js) - Professional registration
- [client/src/pages/RegisterSeeker.js](mdc:client/src/pages/RegisterSeeker.js) - Seeker registration

### Protected Routes
- Routes in [client/src/App.js](mdc:client/src/App.js) use `checkDirectAuth()` for protection

## Database Structure

### Data Models
- [server/src/models/User.js](mdc:server/src/models/User.js) - User authentication and data
- [server/src/models/Professional.js](mdc:server/src/models/Professional.js) - Professional profiles
- [server/src/models/CoffeeChat.js](mdc:server/src/models/CoffeeChat.js) - Meeting sessions

### Database Operations
- User registration creates basic user with userType (professional/seeker)
- Professional profiles are linked to user accounts via userId field
- CoffeeChats track meetings between seekers and professionals

### Database Scripts
- [server/scripts/cleanupUsers.js](mdc:server/scripts/cleanupUsers.js) - Manage test users
- [server/scripts/fixUserTypes.js](mdc:server/scripts/fixUserTypes.js) - Fix user type issues
- [server/scripts/deleteAllUsers.js](mdc:server/scripts/deleteAllUsers.js) - Reset user database

## Key User Flows

### Registration and Login
1. User registers via `/register/professional` or `/register/seeker`
2. Registration completes with token storage
3. User is redirected to Dashboard

### Professional Discovery
1. User navigates to `/professionals`
2. Filtered list of professionals is displayed
3. User can select a professional for booking

### Session Booking
1. User selects available time slot
2. Payment is processed via Stripe
3. Zoom meeting is created
4. Both users receive notifications

